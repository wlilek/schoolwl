//1.Разработать функцию HowMuch(const S:string):integer, определяющую, сколько гласных 
//латинских букв в строке S стоят на нечетных местах. С помощью данной функции 
//вывести только такие строки из введенного набора, у которых по крайней мере 3 
//гласные буквы стоят на нечетных местах. Гласными считаются следующие буквы: 
//aeiouyAEIOUY.


using System.Security.Cryptography;

static int HowMuch(string sStr)
{

    char[] p = { 'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y' };
    int v = 0;
    for (int i = 0; i < sStr.Length - 1; i++)
    {
        if ((i +1) % 2 == 1)
        {
            string s1 = Convert.ToString(sStr[i]);
            for (int j = 0; j < p.Length - 1; j++)
            {
                if (Convert.ToString(p[j]) == s1)
                {
                    v++;
                }

            }
        }

    }
    return v;
}
Console.WriteLine("Введите строку");
string s = Convert.ToString(HowMuch(Console.ReadLine()));
Console.WriteLine("В строке " + s + "   гласных латинских букв стоят на нечетных местах");











//5.Описать рекурсивную функцию Combin2(N, K) целого типа, находящую C(N, K) — число
//сочетаний из N элементов по K — с помощью рекуррентного соотношения: 
//C(N, 0) = C(N, N) = 1,
//C(N, K) = C(N – 1, K) + C(N – 1, K – 1) при 0 < K < N.
//Параметры функции — целые числа;
//N > 0, 0 <= K <= N.Считать, что параметр N не превосходит 20. Для уменьшения 
//количества рекурсивных вызовов по сравнению с функцией Combin1 (см. задание 
//Recur6) описать вспомогательный двумерный массив для хранения уже вычисленных 
//чисел C(N, K) и обращаться к нему при выполнении функции Combin2. С помощью 
//функции Combin2 найти числа C(N, K) для данного значения N и пяти различных 
//значений K.